# Copyright (c) 2016 Contributors to COVESA
#
# This program and the accompanying materials are made available under the
# terms of the Mozilla Public License 2.0 which is available at
# https://www.mozilla.org/en-US/MPL/2.0/
#
# SPDX-License-Identifier: MPL-2.0

#
# All body signals and attributes.
#

BodyType:
  datatype: string
  type: attribute
  description: Body type code as defined by ISO 3779.

#
# Hood description
#
Hood:
  type: branch
  description: Hood status. Start position for Hood is Closed.
  comment: The hood is the hinged cover over the engine compartment of a motor vehicles.
           Depending on vehicle, it can be either in the front or back of the vehicle.
           Luggage compartments are in VSS called trunks, even if they are located at the front of the vehicle.

#include ../include/MovableItem.vspec Hood

#
# Trunk description
#
Trunk:
  type: branch
  instances: ["Front", "Rear"]
  description: Trunk status. Start position for Trunk is Closed.
  comment: A trunk is a luggage compartment in a vehicle.
           Depending on vehicle, it can be either in the front or back of the vehicle.
           Some vehicles may have trunks both at the front and at the rear of the vehicle.

#include ../include/LockableMovableItem.vspec Trunk

Trunk.IsLightOn:
  datatype: boolean
  type: actuator
  description: Is trunk light on
  comment: V4.0 Moved from Vehicle.Cabin.Lights.IsTrunkOn because Trunk is not defined as part of the Cabin.


#
# Horn description
#
Horn:
  type: branch
  description: Horn signals.

Horn.IsActive:
  datatype: boolean
  type: actuator
  description: Horn active or inactive. True = Active. False = Inactive.


#
# Raindetection description
#
Raindetection:
  type: branch
  description: Rain sensor signals.

Raindetection.Intensity:
  datatype: uint8
  type: sensor
  unit: percent
  max: 100
  description: Rain intensity. 0 = Dry, No Rain. 100 = Covered.


#
# Windshields description
#
Windshield:
  type: branch
  instances: ["Front", "Rear"]
  description: Windshield signals.

Windshield.Wiping:
  type: branch
  description: Windshield wiper signals.

Windshield.Wiping.Mode:
  datatype: string
  type: actuator
  allowed: ['OFF', 'SLOW', 'MEDIUM', 'FAST', 'INTERVAL', 'RAIN_SENSOR']
  description: Wiper mode requested by user/driver.
               INTERVAL indicates intermittent wiping, with fixed time interval between each wipe.
               RAIN_SENSOR indicates intermittent wiping based on rain intensity.

Windshield.Wiping.Intensity:
  datatype: uint8
  type: actuator
  description: Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver.
               Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST
               0 - wipers inactive.
               1 - minimum intensity (lowest frequency/sensitivity, longest interval).
               2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval).
               Maximum value supported is vehicle specific.

Windshield.Wiping.System:
  type: branch
  description: Signals to control behavior of wipers in detail.
               By default VSS expects only one instance.
  comment:     These signals are typically not directly available to the user/driver of the vehicle.
               The overlay in overlays/extensions/dual_wiper_systems.vspec can be used to modify this branch
               to support two instances; Primary and Secondary.

#include WiperSystem.vspec Windshield.Wiping.System

Windshield.Wiping.WiperWear:
  datatype: uint8
  type: sensor
  unit: percent
  max: 100
  description: Wiper wear as percent.
               0 = No Wear.
               100 = Worn. Replacement required.
               Method for calculating or estimating wiper wear is vehicle specific.
               For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.

Windshield.Wiping.IsWipersWorn:
  datatype: boolean
  type: sensor
  description: Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.

Windshield.IsHeatingOn:
  datatype: boolean
  type: actuator
  description: Windshield heater status. False - off, True - on.

Windshield.WasherFluid:
  type: branch
  description: Windshield washer fluid signals

Windshield.WasherFluid.IsLevelLow:
  datatype: boolean
  type: sensor
  description: Low level indication for washer fluid. True = Level Low. False = Level OK.

Windshield.WasherFluid.Level:
  datatype: uint8
  unit: percent
  max: 100
  type: sensor
  description: Washer fluid level as a percent. 0 = Empty. 100 = Full.

##
#  Lights definition
##
Lights:
  type: branch
  description: Exterior lights.

Lights.LightSwitch:
  datatype: string
  type: actuator
  allowed: ['OFF', 'POSITION', 'DAYTIME_RUNNING_LIGHTS', 'AUTO', 'BEAM']
  description: Status of the vehicle main light switch.
  comment: A vehicle typically does not support all alternatives.
           Which lights that actually are lit may vary according to vehicle configuration and local legislation.
           OFF is typically indicated by 0.
           POSITION is typically indicated by ISO 7000 symbol 0456.
           DAYTIME_RUNNING_LIGHTS (DRL) can be indicated by ISO 7000 symbol 2611.
           AUTO indicates that vehicle automatically selects suitable lights.
           BEAM is typically indicated by ISO 7000 symbol 0083.

Lights.IsHighBeamSwitchOn:
  datatype: boolean
  type: actuator
  description: Status of the high beam switch. True = high beam enabled. False = high beam not enabled.
  comment: This signal indicates the status of the switch and does not indicate if low or high beam actually are on.
           That typically depends on vehicle logic and other signals like Lights.LightSwitch and Vehicle.LowVoltageSystemState.

Lights.Beam:
  type: branch
  instances: ["Low","High"]
  description: Beam lights.
#include StaticLights.vspec Lights.Beam

Lights.Running:
  type: branch
  description: Daytime running lights (DRL).
#include StaticLights.vspec Lights.Running

Lights.Backup:
  type: branch
  description: Backup lights.
#include StaticLights.vspec Lights.Backup

Lights.Parking:
  type: branch
  description: Parking lights.
#include StaticLights.vspec Lights.Parking

Lights.Fog:
  type: branch
  instances: ["Rear","Front"]
  description: Fog lights.
#include StaticLights.vspec Lights.Fog

Lights.LicensePlate:
  type: branch
  description: License plate lights.
#include StaticLights.vspec Lights.LicensePlate

Lights.Brake:
  type: branch
  description: Brake lights.
#include BrakeLights.vspec Lights.Brake

Lights.Hazard:
  type: branch
  description: Hazard lights.
#include SignalingLights.vspec Lights.Hazard

Lights.DirectionIndicator:
  type: branch
  instances: ["Left","Right"]
  description: Indicator lights.
#include SignalingLights.vspec Lights.DirectionIndicator

##
#  Mirrors definition
##
Mirrors:
  type: branch
  instances: ["DriverSide", "PassengerSide"]
  description: All mirrors.
# Include mirrors specification and attach it to the Mirrors branch
#include ExteriorMirrors.vspec Mirrors

##
# Spoilers
##

RearMainSpoilerPosition:
  datatype: float
  unit: percent
  type: actuator
  min: 0
  max: 100
  description: Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.

#include include/PowerOptimize.vspec
