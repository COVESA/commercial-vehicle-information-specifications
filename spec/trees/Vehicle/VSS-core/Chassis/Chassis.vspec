# Copyright (c) 2016 Contributors to COVESA
#
# This program and the accompanying materials are made available under the
# terms of the Mozilla Public License 2.0 which is available at
# https://www.mozilla.org/en-US/MPL/2.0/
#
# SPDX-License-Identifier: MPL-2.0

#
# Chassis signals and attributes
#

Wheelbase:
  datatype: uint16
  type: attribute
  default: 0
  unit: mm
  description: Overall wheelbase, in mm.


#
# Axle definition
#
Axle:
  instances:
    - Row[1,2]
  type: branch
  description: Axle signals

AxleCount:
  datatype: uint8
  type: attribute
  default: 2
  description: Number of axles on the vehicle


#
# Axle attributes
#

Axle.TreadWidth:
  datatype: uint16
  type: attribute
  unit: mm
  description: The lateral distance between the centerlines of the base tires at ground, including camber angle.
               If there are dual rear wheels, measure from the midway points between the inner and outer tires.
  comment: Corresponds to SAE J1100-2009 W101.

Axle.TrackWidth:
  datatype: uint16
  type: attribute
  unit: mm
  description: The lateral distance between the centers of the wheels, measured along the spindle, or axle axis.
               If there are dual rear wheels, measure from the midway points between the inner and outer tires.
  comment: Corresponds to SAE J1100-2009 W102.

Axle.AxleWidth:
  datatype: uint16
  type: attribute
  unit: mm
  description: The lateral distance between the wheel mounting faces, measured along the spindle axis.
  comment: Corresponds to SAE J1100-2009 W113.

Axle.WheelCount:
  datatype: uint8
  type: attribute
  description: Number of wheels on the axle

Axle.WheelDiameter:
  datatype: float
  type: attribute
  unit: inch
  description: Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.

Axle.WheelWidth:
  datatype: float
  type: attribute
  unit: inch
  description: Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.

Axle.SteeringAngle:
  datatype: float
  type: sensor
  unit: degrees
  description: Single track two-axle model steering angle.
               Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.
  comment: Single track two-axle model steering angle refers to the angle that a centrally mounted wheel would have.
#
# Tire attributes
#
# Tire size can be specified by different systems
# The VSS signals are intended to support both ISO metric tire code and flotation/numeric sizes.
# Note that tires typically specify either tire diameter or aspect ratio, but both are included in VSS
# for convenience, and it is possible for a vehicle to present both attributes as they can be calculated from each other.
# Axle.TireDiameter = Axle.WheelDiameter + ((2 * Axle.TireWidth * Axle.TireAspectRatio) /(100*25.4))

Axle.TireDiameter:
  datatype: float
  type: attribute
  unit: inch
  description: Outer diameter of tires, in inches, as per ETRTO / TRA standard.

Axle.TireWidth:
  datatype: uint16
  type: attribute
  unit: mm
  description: Nominal section width of tires, in mm, as per ETRTO / TRA standard.

Axle.TireAspectRatio:
  datatype: uint8
  type: attribute
  unit: percent
  description: Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.

#
# Wheels on Axles
#
Axle.Wheel:
  instances: ["Left","Right"]
  type: branch
  description: Wheel signals for axle

#include Wheel.vspec Axle.Wheel

#
# Parking Brake
#
ParkingBrake:
  type: branch
  description: Parking brake signals

ParkingBrake.IsEngaged:
  datatype: boolean
  type: actuator
  description: Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.

ParkingBrake.IsAutoApplyEnabled:
  datatype: boolean
  type: actuator
  description: Indicates if parking brake will be automatically engaged when the vehicle engine is turned off.
#
# Steering Wheel
#
SteeringWheel:
  type: branch
  description: Steering wheel signals

SteeringWheel.Angle:
  datatype: int16
  type: sensor
  unit: degrees
  description: Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.

SteeringWheel.Tilt:
  datatype: uint8
  type: actuator
  min: 0
  max: 100
  unit: percent
  description: Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.

SteeringWheel.Extension:
  datatype: uint8
  type: actuator
  min: 0
  max: 100
  unit: percent
  description: Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.

#include include/ItemHeatingCooling.vspec SteeringWheel

#
# Accelerator
#
Accelerator:
  type: branch
  description: Accelerator signals

Accelerator.PedalPosition:
  datatype: uint8
  type: sensor
  min: 0
  max: 100
  unit: percent
  description: Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.


#
# Brake
#
Brake:
  type: branch
  description: Brake system signals

Brake.PedalPosition:
  datatype: uint8
  type: sensor
  min: 0
  max: 100
  unit: percent
  description: Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.

Brake.IsDriverEmergencyBrakingDetected:
  datatype: boolean
  type: sensor
  description: Indicates if emergency braking initiated by driver is detected.
               True = Emergency braking detected. False = Emergency braking not detected.
  comment: Detection of emergency braking can trigger Emergency Brake Assist (EBA) to engage.
