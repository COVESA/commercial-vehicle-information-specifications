# Copyright (c) 2016 Contributors to COVESA
#
# This program and the accompanying materials are made available under the
# terms of the Mozilla Public License 2.0 which is available at
# https://www.mozilla.org/en-US/MPL/2.0/
#
# SPDX-License-Identifier: MPL-2.0

#
# Signals and attributes related to the traction battery in vehicles with electrical powertrain.
# For some vehicles the traction battery is referred to as the high voltage battery.
#

Id:
  datatype: string
  type: attribute
  description: Battery Identification Number as assigned by OEM.
  comment: This could be serial number, part number plus serial number, UUID,
           or any other identifier that the OEM want to use to uniquely identify the battery individual.

ProductionDate:
  datatype: string
  type: attribute
  unit: iso8601
  description: Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.

ErrorCodes:
  datatype: string[]
  type: sensor
  description: Current error codes related to the battery, if any.
  comment:     Error code format is not defined, it may be DTCs according to OBD II (SAE-J2012DA_201812)
               standard ([P|C|B|U]XXXXX ) or any other format.

IsPowerConnected:
  datatype: boolean
  type: sensor
  description: Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.
  comment: It might be possible to disconnect the traction battery used by an electric powertrain.
           This is achieved by connectors, typically one for plus and one for minus.

IsGroundConnected:
  datatype: boolean
  type: sensor
  description: Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.
  comment: It might be possible to disconnect the traction battery used by an electric powertrain.
           This is achieved by connectors, typically one for plus and one for minus.

Temperature:
  type: branch
  description: Temperature Information for the battery pack.

Temperature.Average:
  datatype: float
  type: sensor
  unit: celsius
  description: Current average temperature of the battery cells.

Temperature.Min:
  datatype: float
  type: sensor
  unit: celsius
  description: Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.

Temperature.Max:
  datatype: float
  type: sensor
  unit: celsius
  description: Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.

Temperature.CellTemperature:
  datatype: float[]
  type: sensor
  description: Array of cell temperatures. Length or array shall correspond to number of cells in vehicle.
  comment: Cells are identified by relative position in array.

CellVoltage:
  type: branch
  description: Voltage information for cells in the battery pack.

CellVoltage.Min:
  datatype: float
  type: sensor
  unit: V
  description: Current voltage of the battery cell with lowest voltage.

CellVoltage.IdMin:
  datatype: uint16
  type: sensor
  description: Identifier of the battery cell with lowest voltage.
  comment: Identifier is supposed to be relative index of the cell, starting with 0 the first cell.

CellVoltage.Max:
  datatype: float
  type: sensor
  unit: V
  description: Current voltage of the battery cell with highest voltage.

CellVoltage.IdMax:
  datatype: uint16
  type: sensor
  description: Identifier of the battery cell with highest voltage.
  comment: Identifier is supposed to be relative index of the cell, starting with 0 the first cell.

CellVoltage.CellVoltages:
  datatype: float[]
  type: sensor
  description: Array of cell voltages. Length or array shall correspond to number of cells in vehicle.
  comment: Cells are identified by relative position in array.

GrossCapacity:
  datatype: uint16
  type: attribute
  unit: kWh
  description: Gross capacity of the battery.

NetCapacity:
  datatype: uint16
  type: sensor
  unit: kWh
  description: Total net capacity of the battery considering aging.

StateOfHealth:
  datatype: float
  type: sensor
  unit: percent
  min: 0
  max: 100
  description: Calculated battery state of health at standard conditions.
  comment: Exact formula is implementation dependent.
           Could be e.g. current capacity at 20 degrees Celsius divided with original capacity at the same temperature.

StateOfCharge:
  type: branch
  description: Information on the state of charge of the vehicle's high voltage battery.

StateOfCharge.Current:
  type: sensor
  unit: percent
  datatype: float
  min: 0
  max: 100.00
  description: Physical state of charge of the high voltage battery, relative to net capacity.
               This is not necessarily the state of charge being displayed to the customer.

StateOfCharge.Displayed:
  type: sensor
  datatype: float
  unit: percent
  min: 0
  max: 100.00
  description: State of charge displayed to the customer.

StateOfCharge.CurrentEnergy:
  type: sensor
  datatype: float
  unit: kWh
  description: Physical state of charge of high voltage battery expressed in kWh.
  comment: Current energy could be calculated as .StateOfCharge.Current * .NetCapacity.

NominalVoltage:
  datatype: uint16
  type: attribute
  unit: V
  description: Nominal Voltage of the battery.
  comment: Nominal voltage typically refers to voltage of fully charged battery when delivering rated capacity.

MaxVoltage:
  datatype: uint16
  type: attribute
  unit: V
  description: Max allowed voltage of the battery, e.g. during charging.

CurrentVoltage:
  datatype: float
  type: sensor
  unit: V
  description: Current Voltage of the battery.

CurrentCurrent:
  datatype: float
  type: sensor
  unit: A
  description: Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging.
               Negative = Current flowing out of battery, e.g. during driving.

CurrentPower:
  datatype: float
  type: sensor
  unit: W
  description: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging.
               Negative = Energy flowing out of battery, e.g. during driving.

AccumulatedChargedEnergy:
  datatype: float
  type: sensor
  unit: kWh
  description: The accumulated energy delivered to the battery during charging over lifetime of the battery.

AccumulatedConsumedEnergy:
  datatype: float
  type: sensor
  unit: kWh
  description: The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.

AccumulatedChargedThroughput:
  datatype: float
  type: sensor
  unit: Ah
  description: The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.

AccumulatedConsumedThroughput:
  datatype: float
  type: sensor
  unit: Ah
  description: The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.

PowerLoss:
  datatype: float
  type: sensor
  unit: W
  description: Electrical energy lost by power dissipation to heat inside the battery.

Range:
  datatype: uint32
  type: sensor
  unit: m
  description: Remaining range in meters using only battery.

TimeRemaining:
  datatype: uint32
  type: sensor
  unit: s
  description: Time remaining in seconds before the battery is empty.

Charging:
  type: branch
  description: Properties related to battery charging.

Charging.ChargingPort:
  type: branch
  instances:
    - ["FrontLeft", "FrontMiddle", "FrontRight", "RearLeft", "RearMiddle", "RearRight", "AnyPosition"]
  description: Properties related to a particular charging port available in the vehicle.
  comment: If a vehicle has a single charging port, then use the instance AnyPosition.

Charging.ChargingPort.SupportedInletTypes:
  datatype: string[]
  type: attribute
  allowed: [
    'IEC_TYPE_1_AC',
    'IEC_TYPE_2_AC',
    'IEC_TYPE_3_AC',
    'IEC_TYPE_4_DC',
    'IEC_TYPE_1_CCS_DC',
    'IEC_TYPE_2_CCS_DC',
    'TESLA_ROADSTER',
    'TESLA_HPWC',
    'TESLA_SUPERCHARGER',
    'GBT_AC',
    'GBT_DC',
    'OTHER'
    ]
  description: A list of the supported (i.e., available) charging inlets in a particular charging port.
               IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.
  comment:     A vehicle may have multiple charging ports.
               IEC_TYPE_1_AC refers to Type 1 as defined in IEC 62196-2. Also known as Yazaki or J1772 connector.
               IEC_TYPE_2_AC refers to Type 2 as defined in IEC 62196-2. Also known as Mennekes connector.
               IEC_TYPE_3_AC refers to Type 3 as defined in IEC 62196-2. Also known as Scame connector.
               IEC_TYPE_4_DC refers to AA configuration as defined in IEC 62196-3. Also known as Type 4 or CHAdeMO connector.
               IEC_TYPE_1_CCS_DC refers to EE Configuration as defined in IEC 62196-3. Also known as CCS1 or Combo1 connector.
               IEC_TYPE_2_CCS_DC refers to FF Configuration as defined in IEC 62196-3. Also known as CCS2 or Combo2 connector.
               TESLA_ROADSTER, TESLA_HPWC (High Power Wall Connector) and TESLA_SUPERCHARGER refer to non-standardized charging
               ports/methods used by Tesla.
               GBT_AC refers to connector specified in GB/T 20234.2.
               GBT_DC refers to connector specified in GB/T 20234.3. Also specified as BB Configuration in IEC 62196-3.
               OTHER shall be used for charging ports not included in the list above.
               For additional information see https://en.wikipedia.org/wiki/IEC_62196.

Charging.ChargingPort.IsFlapOpen:
  type: actuator
  datatype: boolean
  description: Status of the charging port flap(s).
  comment: True = at least one flap of this port is open, False = All flaps of this port are closed.

Charging.ChargingPort.IsChargingCableConnected:
  datatype: boolean
  type: sensor
  description: Indicates whether a charging cable is physically connected to a particular charging port or not.

Charging.ChargingPort.IsChargingCableLocked:
  datatype: boolean
  type: actuator
  description: Is charging cable locked to prevent removal.
  comment: Locking of charging cable can be used to prevent unintentional removing during charging.

Charging.ChargeLimit:
  datatype: uint8
  type: actuator
  min: 0
  max: 100
  default: 100
  unit: percent
  description: Target charge limit (state of charge) for battery.

Charging.MaximumChargingCurrent:
  type: branch
  description: Maximum charging current that can be accepted by the system, as measured at the charging inlet.

Charging.MaximumChargingCurrent.DC:
  datatype: float
  type: sensor
  unit: A
  description: Maximum DC charging current at inlet that can be accepted by the system.

Charging.MaximumChargingCurrent.Phase1:
  datatype: float
  type: sensor
  unit: A
  description: Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.

Charging.MaximumChargingCurrent.Phase2:
  datatype: float
  type: sensor
  unit: A
  description: Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.

Charging.MaximumChargingCurrent.Phase3:
  datatype: float
  type: sensor
  unit: A
  description: Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.

Charging.IsCharging:
  datatype: boolean
  type: sensor
  description: True if charging is ongoing.
               Charging is considered to be ongoing if energy is flowing from charger to vehicle.

Charging.IsDischarging:
  datatype: boolean
  type: sensor
  description: True if discharging (vehicle to grid) is ongoing.
               Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.

Charging.StartStopCharging:
  datatype: string
  type: actuator
  allowed: ['START', 'STOP']
  description: Start or stop the charging process.

Charging.ChargeCurrent:
  type: branch
  description: Current charging current.

Charging.ChargeCurrent.DC:
  datatype: float
  type: sensor
  unit: A
  description: Current DC charging current at inlet. Negative if returning energy to grid.

Charging.ChargeCurrent.Phase1:
  datatype: float
  type: sensor
  unit: A
  description: Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.

Charging.ChargeCurrent.Phase2:
  datatype: float
  type: sensor
  unit: A
  description: Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.

Charging.ChargeCurrent.Phase3:
  datatype: float
  type: sensor
  unit: A
  description: Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.

Charging.ChargeVoltage:
  type: branch
  description: Current charging voltage, as measured at the charging inlet.

Charging.ChargeVoltage.DC:
  datatype: float
  type: sensor
  unit: V
  description: Current DC charging voltage at charging inlet.

Charging.ChargeVoltage.Phase1:
  datatype: float
  type: sensor
  unit: V
  description: Current AC charging voltage (rms) at inlet for Phase 1.

Charging.ChargeVoltage.Phase2:
  datatype: float
  type: sensor
  unit: V
  description: Current AC charging voltage (rms) at inlet for Phase 2.

Charging.ChargeVoltage.Phase3:
  datatype: float
  type: sensor
  unit: V
  description: Current AC charging voltage (rms) at inlet for Phase 3.

Charging.AveragePower:
  datatype: float
  type: sensor
  unit: kW
  description: Average charging power of last or current charging event.

Charging.MaxPower:
  datatype: float
  type: sensor
  unit: kW
  description: Maximum charging power of last or current charging event.

Charging.EvseId:
  datatype: string
  type: sensor
  description: EVSE charging point ID (without separators) of last or current charging event according to ISO 15118-2 Annex H.
  comment: Length of id between 7 and 37 characters. ZZ00000 to be used if SECC cannot provide id

Charging.Location:
  type: branch
  description: Location of last or current charging event.
  comment: This may depending on implementation represent the location of (the charge port of) the vehicle during charging,
           or the actual location of the charger/load connected to the vehicle.

Charging.Location.Latitude:
  datatype: double
  type: sensor
  min: -90
  max: 90
  unit: degrees
  description: Latitude of last or current charging event in WGS 84 geodetic coordinates.

Charging.Location.Longitude:
  datatype: double
  type: sensor
  min: -180
  max: 180
  unit: degrees
  description: Longitude of last or current charging event in WGS 84 geodetic coordinates.

Charging.Location.Altitude:
  datatype: double
  type: sensor
  unit: m
  description: Altitude relative to WGS 84 reference ellipsoid of last or current charging event.

Charging.PowerLoss:
  datatype: float
  type: sensor
  unit: W
  description: Electrical energy lost by power dissipation to heat inside the AC/DC converter.

Charging.Temperature:
  datatype: float
  type: sensor
  unit: celsius
  description: Current temperature of AC/DC converter converting grid voltage to battery voltage.

Charging.ChargeRate:
  datatype: float
  type: sensor
  unit: km/h
  description: Current charging rate, as in kilometers of range added per hour.

Charging.TimeToComplete:
  datatype: uint32
  type: sensor
  unit: s
  description: The time needed for the current charging process to reach Charging.ChargeLimit.
               0 if charging is complete or no charging process is active or planned.
  comment: Shall consider time set by Charging.Timer.Time.
           E.g. if charging shall start in 3 hours and 2 hours of charging is needed,
           then Charging.TimeToComplete shall report 5 hours.

Charging.Timer:
  type: branch
  description: Properties related to timing of battery charging sessions.

Charging.Timer.Mode:
  datatype: string
  type: actuator
  allowed: ['INACTIVE', 'START_TIME', 'END_TIME']
  description: "Defines timer mode for charging:
               INACTIVE - no timer set, charging may start as soon as battery is connected to a charger.
               START_TIME - charging shall start at Charging.Timer.Time.
               END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time.
               When charging is completed the vehicle shall change mode to 'inactive' or set a new Charging.Timer.Time.
               Charging shall start immediately if mode is 'starttime' or 'endtime' and Charging.Timer.Time is a time in the past."

Charging.Timer.Time:
  datatype: string
  type: actuator
  unit: iso8601
  description: Time for next charging-related action, formatted according to ISO 8601 with UTC time zone.
               Value has no significance if Charging.Timer.Mode is 'inactive'.

DCDC:
  type: branch
  description: Properties related to DC/DC converter converting high voltage (from high voltage battery)
               to vehicle low voltage (supply voltage, typically 12 Volts).

DCDC.PowerLoss:
  datatype: float
  type: sensor
  unit: W
  description: Electrical energy lost by power dissipation to heat inside DC/DC converter.

DCDC.Temperature:
  datatype: float
  type: sensor
  unit: celsius
  description: Current temperature of DC/DC converter converting battery high voltage
               to vehicle low voltage (typically 12 Volts).


#include TractionBattery/BatteryConditioning.vspec
