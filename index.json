[
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/him_configurator/",
	"title": "HIM configurator",
	"tags": [],
	"description": "",
	"content": "HIM configurator Build instructions To build the HIM configurator it is necessary to first instal the Golang build system. Searching on \u0026ldquo;install golang\u0026rdquo; will lead to many matches of which one is:\nhttps://go.dev/doc/install\nTo build the HIM configurator, open a trminal and go to the spec/trees directory where the himConfigurator.go is stored, and issue the command\n$ go build -o himConfigurator\nUsing the HIM configurator Starting the HIM configurator with the command:\n$ ./himConfigurator -h will show the command line options that is possible to apply at startup.\n$ ./himConfigurator -h usage: print [-h|--help] [-m|--makecommand (all|yaml|json|csv|binary)] [-v|--vspecdir \u0026#34;\u0026lt;value\u0026gt;\u0026#34;] [-c|--saveconf] HIM configurator Arguments: -h --help Print help information -m --makecommand Make command parameter must be either: all, yaml, csv, or binary. Default: all -v --vspecdir path to vspec root directory. Default: Heavyduty/Tractor/ -c --saveconf Saves the configured vspec file with extension .conf. Default: false The -m command line option is used to set which VSS-tools exporter the configured tree should have. The value \u0026lsquo;all\u0026rsquo; leads to that all the exporters that are compatible with the HIM configurator are executed. If not used the default is \u0026lsquo;all\u0026rsquo;.\nThe -v command line option is used to set the path to the tree that should be used as input for the configuration. The path is relative to the tree directory, and should have the slash \u0026lsquo;/\u0026rsquo; character at the end of the path. If not used the default is \u0026lsquo;Heavyduty/Tractor/\u0026rsquo;.\nThe -c command line option is used to save a copy of the vspec files that are changed during the HIM configurator session. These files are saved with their original name post-fixed by \u0026lsquo;.conf\u0026rsquo;. If not set these files are deleted after being used as input to the call of the VSS-tools exporter(s). If not used the default is false, i. e. not to save the files.\n"
},
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/tractor_tree/",
	"title": "Tractor tree",
	"tags": [],
	"description": "",
	"content": "Heavyduty tractor tree xx\u0026hellip;\n"
},
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/trailer_tree/",
	"title": "Trailer tree",
	"tags": [],
	"description": "",
	"content": "Heavyduty trailer tree xxx\u0026hellip;\n"
},
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/",
	"title": "Commercial Vehicle Information Specifications",
	"tags": [],
	"description": "",
	"content": "Commercial Vehicle Information Specifications Overview The HIM rule set for signals is used in this project, and since it is identical to the VSS rule set this framework inherits \u0026ldquo;patterns\u0026rdquo; from VSS\nThe vspec file format. The usage of VSS-tools to transform from the vspec format to other exporter formats. The CVIS signal trees are defined in two directory structures - objects directory structure: This is where the common \u0026ldquo;tree objects\u0026rdquo; are stored that may be shared between multiple trees. trees directory structure: Thisis where the unique trees for different domains are stored.\nThe directory structure for a single tree follows the VSS pattern with \u0026ldquo;#include\u0026rdquo; links in the vspec files that logically links to other files of the tree. However, to link to a file in the common objects structure the corresponding file in the trees structure is realized as a symbolic link file. This means that when the content of the file is accessed the underlying file system follows the symbolic link to the file in the objects structure for the actual content of the file. This is transparent to the entity accessing the file, so e. g. the exporter tools from VSS-tools will when used for a transformation of a specific tree access file content from the common objects files tranparently.\nTree development The HIM rule set for resource data is used to define signals in a tree. This syntax can be directly used as input to any of the exporter tools provided by VSS-tools.\nHIM extensions The HIM syntax is in this project extended with two features. These can be preprocessed by the HIM configurator which transforms them into a HIM compliant format, thus making it possible to use the SS-tools for exporting to other formats. If these extensions are found to be useful it is likely that they will become included in the HIM standard rule set for resurce data.\nVariability configuration The tree in vspec format may contain multiple variations of objects that in a deployment typically are not included. An example are the Combustion engine and the Electric engine. in an ICE vehicle the former should be included, but not the latter. For an EV vehicle it is vice versa. To enable one or the other of these objects to be included the following syntax is used, example taken from the Engine.vspec.\nVariationPoint: #EngineType - ICE #include CombustionEngine.yaml Engine - EV #include ElectricEngine.vspec Engine The keyword is VariationPoint, which on the same line must be followed by a hash sign (#) directly followe by a unique variation point tag (in this case EngineType. The value part of this key-value expression is an array of \u0026lsquo;variability object expressions\u0026rsquo;, where such an expression contains a \u0026lsquo;variability name\u0026rsquo; followed by an \u0026lsquo;#include expression\u0026rsquo;. This expression must be compliant with the syntax rules for HIM #include expressions. The array size is not restricted.\nThe input to the HIM configurator for it to resolve which variations to select is found in two files.\nThe Variability.json file, and the himConfiguration.json file. The Variability.json file defines the available variations, and which include statements that should be selected for the variation. As can be seen in th PHEV variation example below it is possible to select multiple include statements.\n\u0026#34;EngineType\u0026#34;: [ { \u0026#34;PHEV\u0026#34;: [ \u0026#34;ICE\u0026#34;, \u0026#34;EV\u0026#34; ] } The himConfiguration.json file contains the variation that that should be included in the tree that is generated by the himConfigurator (using a VSS-tools exporter), expressed by the rows below in this example:\n\u0026#34;variants\u0026#34;: { \u0026#34;EngineType\u0026#34;: \u0026#34;PHEV\u0026#34; Instantiation configuration The HIM rule set supports the instantiation syntax inherited from VSS instantiation that can be used to request the VSS-tools to generate multiple instances of a branch/set of signals. This syntax has two options exemplified below\ninstances: [\u0026ldquo;DriverSide\u0026rdquo;, \u0026ldquo;PassengerSide\u0026rdquo;] instances: Row[1,2] The examples above can be extended to two dimensions by using the array syntax, e.g. instances: - Row[1,2] - [\u0026#34;DriverSide\u0026#34;, \u0026#34;PassengerSide\u0026#34;] which will generate a structure with four branches - Row1:DriverSide, Row1:PassengerSide, Row2:DriverSide, Row2:PassengerSide. It is however not possible to use this syntax to express a configuration where for Row1 there are two child nodes, e.g. [\u0026ldquo;DriverSide\u0026rdquo;, \u0026ldquo;PassengerSide\u0026rdquo;], and for Row2 there are three child nodes, e. g. [\u0026ldquo;DriverSide\u0026rdquo;, \u0026ldquo;Middle\u0026rdquo;, \u0026ldquo;PassengerSide\u0026rdquo;].\nThis missing flexibility is however provided in the extended syntax supported by the HIM configurator. A two-dimensional instantiation is then expressed in the vspec file as:\ninstances0: x #instanceTag instances1: x #instanceTag where \u0026lsquo;instances0\u0026rsquo; is used for the \u0026lsquo;first-order\u0026rsquo; instantiation (Row[1,2] in the example above), and \u0026lsquo;instances1\u0026rsquo; is used for the \u0026lsquo;second-order\u0026rsquo; instantiation ([\u0026ldquo;DriverSide\u0026rdquo;, \u0026ldquo;PassengerSide\u0026rdquo;] in the example above).\n\u0026lsquo;x\u0026rsquo; is a placeholder for the instance expression in the file himConfiguration.json that is the input to the HM configurator, and \u0026lsquo;instanceTag\u0026rsquo; is a unique name logically linking the two expressions, which must be preceded by a hash character (#). The two instance expressions can, but must not be on two subsequent rows. If not, then the second expression must be defined in any of the nodes that is part of the subtree under the node containing the first expression. The instance configuration input to the HIM configurator has a syntax as exemplified below.\n\u0026#34;instances\u0026#34;: { \u0026#34;Seat\u0026#34;: [ \u0026#34;Row[1,2]\u0026#34;, [ [ \u0026#34;DriverSide\u0026#34;, \u0026#34;PassengerSide\u0026#34; ], [ \u0026#34;DriverSide\u0026#34;, \u0026#34;Middle\u0026#34;, \u0026#34;PassengerSide\u0026#34; ] ] ] } The \u0026lsquo;Seat\u0026rsquo; shown above is the instanceTag name that the HIM configurator will try to match in the vspec file.\nThe \u0026lsquo;first-order\u0026rsquo; instantiation, in this case \u0026ldquo;Row[1,2]\u0026rdquo;, is followed by two \u0026lsquo;second-order\u0026rsquo; instantiation expressions.\nThe number of \u0026lsquo;second-order\u0026rsquo; expressions must match the number of instantiaions that the \u0026lsquo;first-order\u0026rsquo; expression will expand to.\nThe expressions can use any of the two syntax options mentioned above.\nCurrently this syntax can only be used for two-dimensional instantiations.\nTrees under development Currently two trees are being developed:\nTractor tree Trailer tree HIM configurator The framework also contains a new tool, the HIM configurator. In its current version it provides support for two types of tree configuration:\nVariation point configuration: If the tree defined by the vspec files contains data structures that are not typically used together in a specific deployment of the tree, then these can be tagged as a variability point, and the HIM configurator can be used to pick the desired structure(s). Instance configuration: This is an extension of the existing VSS-tools instance support that provides the possibility for a two dimensional instantiation to have unique \u0026ldquo;column instantiation\u0026rdquo; for each \u0026ldquo;row instantiation\u0026rdquo;. Check out the HIM configurator chapter for more details.\nIf this new tool is found to be useful it is planned to add support for \u0026ldquo;default configuration\u0026rdquo; later.\n"
},
{
	"uri": "https://covesa.github.io/commercial-vehicle-information-specifications/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]